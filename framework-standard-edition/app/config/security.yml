security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        Tburton\ResumeBundle\Users\OpenIdUser:     plaintext

    role_hierarchy:
        ROLE_USER:         IS_AUTHENTICATED_OPENID
        ROLE_ADMIN:        ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_USER, ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    providers:
#        in_memory:
#            memory:
#                users:
#                    user:  { password: userpass,  roles: [ 'ROLE_USER'  ] }
#                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }
        fp_openidbundle:
            #id: fp_openid.user_manager #
            #id: [@Tburton.Resume.openid_user_manager] #
            id: Tburton.Resume.openid_user_manager
    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            pattern:    ^/
            logout:
                path:   /Logout
                target: /
            #anonymous: true
            anonymous:  ~
            fp_openid:
                # so createUserFromIdentity method will be called
                create_user_if_not_exists: true
                provider: openid_user_manager # cf below
                # previously we used 'contact/email' field. So we have to request it!
                # Please note that all OpenID providers may not be able to provide all fields.
                # check the desired provider documentation
                required_attributes:
                    - contact/email
                    - namePerson/first
                    - namePerson/last
    providers:
        # the order is important here
        openid_user_manager:
            id: Tburton.Resume.openid_user_manager # the name of the service
        # keep your database provider below!

    # end of changes
    access_control:
        #- { path: ^/login_openid$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/Login$,        role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/Resume/Admin,  roles: ROLE_ADMIN }
        #- { path: /Resume/Admin,   roles: IS_AUTHENTICATED_OPENID }
        #- { path: ^/Admin,         roles: IS_AUTHENTICATED_OPENID }
        - { path: ^/Admin,         roles: ROLE_ADMIN }

        #login:
        #    pattern:  ^/demo/secured/login$
        #    security: false
        #
        #secured_area:
        #    pattern:    ^/demo/secured/
        #    form_login:
        #        check_path: _security_check
        #        login_path: _demo_login
        #    logout:
        #        path:   _demo_logout
        #        target: _demo
             #anonymous: ~
             #http_basic:
             #    realm: "Secured Demo Area"
    #providers:
        # the order is important here
        # keep your database provider below! it may look like this:
        #database:
        #    entity: { class: AcmeDemoBundle:User, property: username }

#    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
